plugins {
    id 'org.jenkins-ci.jpi' version '0.36.2'
}

if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
    throw new GradleException("This project requires Java 8, but it's running on " + JavaVersion.current())
}

group = 'io.jenkins.plugins'
version = version
description = 'A multibranch SCM filter which searches for Jervis YAML in a GitHub repository for filtering branches, tags, and pull requests.'

ext.groovyVersion = System.getenv('GROOVY_VERSION') ?: '2.4.11'
println "Using Groovy ${groovyVersion}"
println "Using Gradle ${gradle.gradleVersion}"
println "Using Java ${org.gradle.internal.jvm.Jvm.current()}"
println "Building ${archivesBaseName}-${version}"

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

jenkinsPlugin {
    // version of Jenkins core this plugin depends on, must be 1.420 or later
    coreVersion = '2.138.4'

    // ID of the plugin, defaults to the project name without trailing '-plugin'
    shortName = 'scm-filter-jervis'

    // human-readable name of plugin
    displayName = 'SCM Filter Jervis Plugin'

    // URL for plugin on Jenkins wiki or elsewhere
    url = 'https://github.com/jenkinsci/scm-filter-jervis-plugin'

    // plugin URL on GitHub, optional
    gitHubUrl = 'https://github.com/jenkinsci/scm-filter-jervis-plugin'

    // use the plugin class loader before the core class loader, defaults to false
    pluginFirstClassLoader = true

    // optional list of package prefixes that your plugin doesn't want to see from core
    maskClasses = 'groovy.grape org.apache.commons.codec'

    // optional version number from which this plugin release is configuration-compatible
    compatibleSinceVersion = '0.1'

    // set the directory from which the development server will run, defaults to 'work'
    //workDir = file('/tmp/jenkins')

    // URL used to deploy the plugin, defaults to the value shown
    // the system property 'jpi.repoUrl' can be used to override this option
    repoUrl = 'https://repo.jenkins-ci.org/releases'

    // URL used to deploy snapshots of the plugin, defaults to the value shown
    // the system property 'jpi.snapshotRepoUrl' can be used to override this option
    snapshotRepoUrl = 'https://repo.jenkins-ci.org/snapshots'

    // enable injection of additional tests for checking the syntax of Jelly and other things
    disabledTestInjection = false

    // the output directory for the localizer task relative to the project root, defaults to the value shown
    //localizerOutputDir = "${project.buildDir}/generated-src/localizer"

    // disable configuration of Maven Central, the local Maven cache and the Jenkins Maven repository, defaults to true
    //configureRepositories = false

    // skip configuration of publications and repositories for the Maven Publishing plugin, defaults to true
    //configurePublishing = false

    // plugin file extension, either 'jpi' or 'hpi', defaults to 'hpi'
    fileExtension = 'hpi'

    // the developers section is optional, and corresponds to the POM developers section
    developers {
        developer {
            id 'sag47'
            name 'Sam Gleske'
            email 'sam.mxracer@gmail.com'
        }
    }

    // the licenses section is optional, and corresponds to the POM licenses section
    licenses {
        license {
            name 'MIT License'
            url 'https://github.com/jenkinsci/scm-filter-jervis-plugin/blob/master/LICENSE'
            distribution 'repo'
            comments 'Copyright 2014-2020 Sam Gleske'
        }
    }
}

dependencies {
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation 'net.gleske:jervis:1.5'
    implementation 'org.yaml:snakeyaml:1.25'

    jenkinsPlugins 'org.jenkins-ci.plugins:credentials:2.1.18'
    jenkinsPlugins 'org.jenkins-ci.plugins:scm-api:2.2.2'
    jenkinsPlugins 'org.jenkins-ci.plugins:github-branch-source:2.5.0'

    jenkinsServer 'org.jenkins-ci.plugins.workflow:workflow-aggregator:2.6'
    jenkinsServer 'org.jenkins-ci.plugins.workflow:workflow-multibranch:2.21'
    jenkinsServer 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.19'
    jenkinsServer 'org.jenkins-ci.plugins:token-macro:2.7'
    jenkinsServer 'org.jenkins-ci.plugins:pipeline-multibranch-defaults:2.0'
    jenkinsServer 'org.jenkins-ci.plugins:basic-branch-build-strategies:1.3.1'
    jenkinsServer 'org.jenkins-ci.plugins:display-url-api:2.3.2'
    jenkinsServer 'org.jenkins-ci.plugins:jackson2-api:2.9.10'
    jenkinsServer 'org.jenkins-ci.plugins:matrix-project:1.14'
}

task cleanJenkins(type: Delete) {
    delete 'work'
}
//clean.dependsOn cleanJenkins

//http://www.gradle.org/docs/current/userguide/gradle_wrapper.html
//generate gradlew with: gradle wrapper
wrapper {
    gradleVersion = '6.0.1'
}

task(console, dependsOn: 'classes', type: JavaExec) {
    main = 'groovy.ui.Console'
    classpath = sourceSets.main.runtimeClasspath
}

// work around groovy version conflicts
configurations.all {
    resolutionStrategy {
        forcedModules = [ 'org.codehaus.groovy:groovy-all:2.4.11' ]
    }
}
// do not publish snapshot releases
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(':publish') && version.endsWith('-SNAPSHOT')) {
        throw new IllegalStateException('ERROR: Snapshot releases are not allowed.')
    }
}
